---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
### Prefer Empty String Over Null/Undefined for Strings

To ensure data consistency and simplify application logic, we have a strict policy for handling "empty" or "missing" string values.

#### ⚠️ CRITICAL: The Empty String (`""`) is the Standard

The empty string (`""`) is the canonical "empty value" for all string types, both in the database and in TypeScript code. Using `null` or `undefined` for strings is prohibited.

**Rationale:**

-   **Eliminates Ambiguity:** A single standard for "empty" prevents confusion and bugs arising from handling three different states (`null`, `undefined`, `""`).
-   **Simplifies Logic:** Application code is simpler as it only needs to check for `""` (e.g., `if (myString === "")`) rather than performing nullish checks (`if (myString == undefined)`).
-   **Database Consistency:** Enforces `NOT NULL` constraints on text columns, improving data integrity.

#### Drizzle Schema Enforcement

All `text` columns in Drizzle schemas **MUST** be defined as non-nullable. The pattern you use depends on whether the field is mandatory or optional.

-   **Mandatory Fields:** Use `.notNull()`. This provides type safety, causing a compile-time error if the field is omitted during an insert.
-   **Optional Fields:** Use `.notNull().default("")`. This is for fields that were previously nullable. The database will provide an empty string if no value is given.

```typescript
// ✅ CORRECT
const myTable = schema.table("my_table", {
  id: uuid("id").primaryKey(),
  // Mandatory field: a value must be provided in TypeScript code.
  name: text("name").notNull(), 
  // Optional field: can be omitted, will default to "" in the DB.
  bio: text("bio").notNull().default(""),
});

// ❌ WRONG
const myTable = schema.table("my_table", {
  // Implicitly nullable, which is disallowed.
  nickname: text("nickname"), 
  // This is a mandatory field. Adding .default("") removes type safety,
  // as it allows the field to be omitted in code without error.
  name: text("name").notNull().default(""), 
});
```

This is enforced by the `prefer-empty-string.grit` rule.

#### TypeScript Enforcement

In TypeScript interfaces, types, and other definitions, string properties **MUST NOT** be optional (`?`) or nullable (`| undefined`).

```typescript
interface UserProfile {
  // ✅ CORRECT
  username: string;
  bio: string;
}

interface UserInput {
  // ❌ WRONG
  username?: string;
  bio: string | undefined;
}
```

When a value is not present, use an empty string (`""`) instead of `undefined`. This aligns the TypeScript representation with the database schema, creating a seamless data model.
