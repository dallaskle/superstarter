---
description: 
globs: src/inngest/functions/**/*.ts
alwaysApply: false
---
### Strict Ban on `db.select` Inside `step.run()` Closures

#### ⚠️ CRITICAL: `db.select` is Absolutely Prohibited in `step.run()`

This rule **strictly prohibits** the direct use of database select operations (e.g., `db.select` from Drizzle ORM or similar methods from other database clients that return query results) within the closure of an Inngest `step.run(name, async () => { ... })`.

**Rationale:**

Inngest's `step.run()` is designed for executing self-contained, retriable units of work, often involving external API calls or simple, non-CPU-intensive logic. A key feature of `step.run()` is that its output (the return value of the closure) is serialized (typically to JSON) and transmitted over HTTP for memoization by the Inngest engine. This memoization is crucial for Inngest's resiliency.

If a `db.select` operation within `step.run()` returns a dataset (even a seemingly small one), this entire dataset is serialized and sent over HTTP. This practice is banned because:

*   **Performance Degradation & Data Blowup:** Serializing, transmitting, and deserializing potentially large or numerous database records as JSON payloads is slow, resource-intensive, and can easily lead to excessive data transfer.
*   **Misaligned Step Philosophy:** `step.run()` is not intended for fetching and returning internal database state. Its strength lies in orchestrating discrete work units, like external API interactions. Internal database state management should be handled through more appropriate patterns.
*   **Increased Network Traffic & Costs:** Unnecessary strain on network resources and higher data transfer/processing costs, especially in serverless environments.
*   **Error Potential:** Risk of "request entity too large" errors, timeouts, or other infrastructure limits being hit.

**Guideline & Recommended Alternatives:**

1.  **Absolute Prohibition:** Do NOT call `db.select` or any similar data-fetching database methods that return datasets directly inside a `step.run()` closure if that data is to be returned from the step.

2.  **Alternative 1: Fetch Data *Before* `step.run()` (for step's internal logic):**
    If data from the database is needed *by the `step.run()` closure itself* to perform its primary action (e.g., to make an external API call with specific parameters derived from DB data), this data MUST be fetched *outside* and *before* the `step.run()` call, typically in the main body of the Inngest function.
    Only small, essential pieces of data (like individual IDs or configuration flags, not entire records or lists of records) should be passed into the `step.run()` closure if necessary. The `step.run()` should then return the result of its primary action (e.g., API response status), not the database data.

    ```typescript
    // ✅ CORRECT: Fetch data before step.run, pass only essential small primitive.
    // (Assumes logger, db, schemas, eq, errors, makeExternalApiCall are appropriately available)
    export const myInngestFunction = inngest.createFunction(
        { id: "my-function-with-prefetched-data" },
        { event: "app/some.event.requiring.data" },
        async ({ event, step, logger }) => {
            const { entityId } = event.data;

            // Fetch required data for the step's logic OUTSIDE step.run
            const entityResult = await errors.try(
                db.select({ name: schemas.entities.name, externalSystemId: schemas.entities.externalSystemId })
                  .from(schemas.entities)
                  .where(eq(schemas.entities.id, entityId))
                  .limit(1)
            );
            if (entityResult.error) {
                logger.error("failed to fetch entity data", { entityId, error: entityResult.error });
                throw errors.wrap(entityResult.error, "fetch entity data");
            }
            if (!entityResult.data.length || !entityResult.data[0]) {
                logger.warn("entity not found, cannot proceed", { entityId });
                return { success: false, message: "Entity not found" };
            }
            const entity = entityResult.data[0];

            // The step.run now uses the prefetched (and minimal) data
            const apiCallSuccessful = await step.run("call-external-system", async () => {
                const callResult = await errors.try(
                    makeExternalApiCall(entity.externalSystemId, { detail: entity.name })
                );
                if (callResult.error) {
                    logger.error("external API call failed in step", { entityId, error: callResult.error });
                    throw errors.wrap(callResult.error, "external API call in step");
                }
                return callResult.data.success; // e.g., boolean
            });

            if (apiCallSuccessful) {
                logger.info("successfully processed entity with external API", { entityId });
                return { success: true, entityId };
            }
            logger.warn("external API call was not successful", { entityId });
            return { success: false, entityId, message: "External API call failed" };
        }
    );
    ```

3.  **Alternative 2: Use `step.invoke()` for Dedicated Data-Fetching Functions:**
    For queries whose results are needed by *subsequent steps* or the broader Inngest function logic, refactor the database access into a separate, dedicated Inngest function. Call this dedicated function using `step.invoke()`. This invoked function can perform the query and return the data. While `step.invoke()` also serializes its return value, it clearly demarcates the data-fetching operation as a distinct, managed step in the workflow. Be mindful of the data size returned by the invoked function.

    ```typescript
    // ✅ RECOMMENDED for workflow data: Use step.invoke
    // (Assumes getProjectDetailsFunction is another Inngest function that performs db.select)
    // (Assumes import of getProjectDetailsFunction follows inngest-function-invocation.mdc)
    const projectDetails = await step.invoke("get-project-details", {
      function: getProjectDetailsFunction,
      data: { projectId: event.data.projectId }
    });
    // projectDetails.name can now be used
    ```

4.  **Guidance on Database Transactions and `step.run()`:**
    If a set of database operations needs to be performed atomically as part of the logical unit of work that a `step.run()` might conceptually represent, these database operations (writes, updates, or even reads if they are part of the atomic unit) should typically be performed *outside* the `step.run()` closure. Consider wrapping these operations in a database transaction (e.g., using `db.transaction(async (tx) => { ... })`) in the main body of your Inngest function, either before or after the `step.run()` call that handles external interactions. This keeps the `step.run()` focused on its non-database task and ensures database atomicity is managed explicitly.

    `step.run()` itself should not be directly responsible for complex database transactions that involve fetching and returning large states.

**Example of What Is Strictly Banned:**

```typescript
// ❌ STRICTLY BANNED: db.select directly inside step.run returning data
// (Assumes logger, db, schemas, errors are appropriately available)
const projectsPayload = await step.run("fetch-all-project-details", async () => {
  const projectsResult = await errors.try(
    db.select() // This is the banned operation inside step.run
      .from(schemas.projects)
  );

  if (projectsResult.error) {
    logger.error("failed to fetch all project details", { error: projectsResult.error });
    throw errors.wrap(projectsResult.error, "fetch all project details");
  }
  
  // This entire 'projectsResult.data' array would be serialized and sent over HTTP.
  // THIS IS THE PROBLEM.
  return { projects: projectsResult.data }; 
});
```

By strictly adhering to this rule, we ensure that `step.run()` is used efficiently, its memoization mechanism is not abused by large data payloads, and our Inngest workflows remain performant and stable, aligning with the intended use of steps for external API calls and simple, self-contained logic.
