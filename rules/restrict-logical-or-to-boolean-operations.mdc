---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
### Restrict Logical OR (`||`) to Boolean Operations

The logical OR (`||`) operator is strictly reserved for boolean logical operations. Its use as a "coalesce" operator or for providing default/fallback values is categorically forbidden.

**Rationale:**

1. **Type Coercion Pitfalls:** The `||` operator treats all falsy values (`false`, `0`, `""`, `null`, `undefined`) the same, which can mask bugs when `0` or empty strings are valid values.
2. **Enforcing Explicit Handling:** Our coding philosophy mandates explicit validation and error handling (per `error-handling.mdc`) rather than silent fallbacks.
3. **Clarity and Intent:** Explicit checks (per `nullish-checks.mdc`) make code logic transparent and unambiguous.

#### Permitted Usage

Use `||` ONLY for combining boolean conditions in control flow statements:

```typescript
// ✅ CORRECT: Boolean operations in conditionals
if (user.isActive || user.isAdmin) {
  // ...
}

while (itemsToProcess.length > 0 || retriesLeft > 0) {
  // ...
}

const status = (job.isComplete || job.isCancelled) ? "Finished" : "Pending";
```

#### Prohibited Usage

Any use of `||` for coalescing or assigning defaults is banned:

```typescript
// ❌ WRONG: Using || for default values
const name = inputName || "Anonymous"; // BANNED
const count = receivedCount || 0; // BANNED (receivedCount could legitimately be 0)
const options = userOptions || {}; // BANNED

// ❌ WRONG: Function argument defaults
function processData(data, config) {
    const items = data.items || []; // BANNED
    const retries = config.retries || 3; // BANNED
}

// ❌ WRONG: Return statement fallbacks
function getSetting(key) {
    const value = cache.get(key);
    return value || "default"; // BANNED
}
```

#### Preferred Alternatives

Use explicit validation and error handling:

```typescript
// ✅ CORRECT: Idiomatic validation for required strings
let name: string;
if (!inputName) {
    throw errors.new("validation: input name is required and cannot be empty");
} else {
    name = inputName;
}

// ✅ CORRECT: Safe check for numbers where 0 is a valid value
let itemCount: number;
if (receivedCount == null) {
	throw errors.new("validation: receivedCount is required");
} else {
	itemCount = receivedCount; // Allows 0 as valid
}

// ✅ CORRECT: Explicit nullish handling in functions
function getSetting(key: string): SettingType {
    const setting = cache.get(key);
    if (setting == null) {
        throw errors.new(`configuration: setting for key '${key}' not found`);
    }
    return setting; // Preserves false, 0, "" as valid values
}
```

By restricting `||` to boolean operations only, we ensure explicit handling of potentially missing data and prevent bugs from unintended falsy coercions.
