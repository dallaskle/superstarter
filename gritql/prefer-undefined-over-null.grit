language js // Applies to JavaScript and TypeScript

// This rule bans the use of `null` within type declarations, including
// type annotations, type aliases, and generic arguments.
// See `rules/prefer-undefined.mdc` for details.

or {
	// Case 1: Colon-based type annotations for variables, parameters,
	// properties, and function return types.
	// Matches: const x: string | null; function f(p: number | null) {}; function f(): T | null {}
	`:$type` as $colon_annotation where {
		$colon_annotation <: contains bubble `null`,
		register_diagnostic(span=$colon_annotation, message="Type annotation uses 'null'. Prefer '... | undefined'. See `rules/prefer-undefined.mdc`.", severity="error")
	},
	// Case 2: Type alias definitions.
	// Matches: type MyType = string | null;
	`type $_ = $type_definition` as $alias_definition where {
		$type_definition <: contains bubble `null`,
		register_diagnostic(span=$alias_definition, message="Type alias uses 'null'. Prefer '... | undefined'. See `rules/prefer-undefined.mdc`.", severity="error")
	},
	// Case 3: Generic type arguments.
	// Matches: React.useState<string | null>(); new Map<string, number | null>();
	`<$generic_args>` as $generic_annotation where {
		$generic_args <: contains bubble `null`,
		register_diagnostic(span=$generic_annotation, message="Generic type argument uses 'null'. Prefer '... | undefined'. See `rules/prefer-undefined.mdc`.", severity="error")
	}
}
