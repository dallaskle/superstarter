language js // Specifies the target language as JavaScript/TypeScript // Added semicolon for consistency

// This rule targets and disallows all forms of 'try' statements:
// 1. try...catch...finally
// 2. try...catch (without finally)
// 3. try...finally (without catch)
// It encourages refactoring to use the 'Errors.try()' or 'Errors.trySync()' pattern.

or {
	// Case 1: try...catch...finally (Most specific, should be checked first)
	(// Matches: try { ... } catch (anyError) { ... } finally { ... }
	`try { $_ /* try_body */ } catch ($catch_param_tcf) { $_ /* catch_body */ } finally { $_ /* finally_body */ }` as $try_catch_finally_block where {
		register_diagnostic(span=$try_catch_finally_block, message="Usage of 'try...catch...finally' is disallowed. Please refactor to use 'Errors.try()' or 'Errors.trySync()' as detailed in `rules/error-handling.mdc`.", severity="error")
	}),
	// Case 2: try...catch (without a finally block)
	(// Matches: try { ... } catch (anyError) { ... }
	// This will now only match if the more specific try...catch...finally did not.
	`try { $_ /* try_body */ } catch ($catch_param_tc) { $_ /* catch_body */ }` as $try_catch_block where {
		register_diagnostic(span=$try_catch_block, message="Direct 'try...catch' usage is disallowed. Please refactor to use 'Errors.try()' or 'Errors.trySync()' as detailed in `rules/error-handling.mdc`.", severity="error")
	}),
	// Case 3: try...finally (without a catch block)
	(// Matches: try { ... } finally { ... }
	`try { $_ /* try_body */ } finally { $_ /* finally_body */ }` as $try_finally_block where {
		register_diagnostic(span=$try_finally_block, message="Usage of 'try...finally' is disallowed. Please refactor using the error handling patterns described in `rules/error-handling.mdc`.", severity="error")
	})
}
