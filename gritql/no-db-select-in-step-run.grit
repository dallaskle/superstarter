language js // Applies to JavaScript and TypeScript

// This rule bans the use of db.select(...) inside a step.run() closure.
// See `rules/no-db-select-in-step-run.mdc` for details.

or {
	// Case 1: step.run("name", callback)
	// Matches patterns like:
	// step.run("step-name", async () => { ... db.select() ... })
	// step.run("step-name", () => { ... db.select() ... })
	// step.run("step-name", async function() { ... db.select() ... })
	// step.run("step-name", function() { ... db.select() ... })
	`step.run($_step_name, $callback_with_name)` as $step_run_call_with_name where {
		$callback_with_name <: or {
			`async () => { $body_stmts_with_name }`,
			`() => { $body_stmts_with_name }`,
			`async function $_function_name ($...) { $body_stmts_with_name }`,
			`function $_function_name ($...) { $body_stmts_with_name }`
		},
		$body_stmts_with_name <: contains `db.select($...)` as $db_select_usage_with_name,
		register_diagnostic(span=$db_select_usage_with_name, message="Using `db.select` inside a `step.run()` closure is strictly banned due to performance issues (excessive data over HTTP) and misalignment with step philosophy. Refer to `rules/no-db-select-in-step-run.mdc` for details and required alternatives.", severity="error")
	},
	// Case 2: step.run(callback)
	// Matches patterns like:
	// step.run(async () => { ... db.select() ... })
	// step.run(() => { ... db.select() ... })
	// step.run(async function() { ... db.select() ... })
	// step.run(function() { ... db.select() ... })
	// Note: This case primarily targets inline function definitions.
	// If `step.run(myFunction)` is used, where `myFunction` is an identifier,
	// this rule won't analyze the body of `myFunction` defined elsewhere.
	`step.run($callback_no_name)` as $step_run_call_no_name where {
		$callback_no_name <: or {
			`async () => { $body_stmts_no_name }`,
			`() => { $body_stmts_no_name }`,
			`async function $_function_name ($...) { $body_stmts_no_name }`,
			`function $_function_name ($...) { $body_stmts_no_name }`
		},
		$body_stmts_no_name <: contains `db.select($...)` as $db_select_usage_no_name,
		register_diagnostic(span=$db_select_usage_no_name, message="Using `db.select` inside a `step.run()` closure is strictly banned due to performance issues (excessive data over HTTP) and misalignment with step philosophy. Refer to `rules/no-db-select-in-step-run.mdc` for details and required alternatives.", severity="error")
	}
}
